// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/moov-go/pkg/models/shared"
	"time"
)

// FailureCode - This field is deprecated and will be removed in December 2023.
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type FailureCode string

const (
	FailureCodeCallIssuer              FailureCode = "call-issuer"
	FailureCodeDoNotHonor              FailureCode = "do-not-honor"
	FailureCodeProcessingError         FailureCode = "processing-error"
	FailureCodeInvalidTransaction      FailureCode = "invalid-transaction"
	FailureCodeInvalidAmount           FailureCode = "invalid-amount"
	FailureCodeNoSuchIssuer            FailureCode = "no-such-issuer"
	FailureCodeReenterTransaction      FailureCode = "reenter-transaction"
	FailureCodeCvvMismatch             FailureCode = "cvv-mismatch"
	FailureCodeLostOrStolen            FailureCode = "lost-or-stolen"
	FailureCodeInsufficientFunds       FailureCode = "insufficient-funds"
	FailureCodeInvalidCardNumber       FailureCode = "invalid-card-number"
	FailureCodeExpiredCard             FailureCode = "expired-card"
	FailureCodeIncorrectPin            FailureCode = "incorrect-pin"
	FailureCodeTransactionNotAllowed   FailureCode = "transaction-not-allowed"
	FailureCodeSuspectedFraud          FailureCode = "suspected-fraud"
	FailureCodeAmountLimitExceeded     FailureCode = "amount-limit-exceeded"
	FailureCodeVelocityLimitExceeded   FailureCode = "velocity-limit-exceeded"
	FailureCodeCardNotActivated        FailureCode = "card-not-activated"
	FailureCodeIssuerNotAvailable      FailureCode = "issuer-not-available"
	FailureCodeCouldNotRoute           FailureCode = "could-not-route"
	FailureCodeCardholderAccountClosed FailureCode = "cardholder-account-closed"
	FailureCodeUnknownIssue            FailureCode = "unknown-issue"
	FailureCodeDuplicateTransaction    FailureCode = "duplicate-transaction"
)

func (e FailureCode) ToPointer() *FailureCode {
	return &e
}

func (e *FailureCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "call-issuer":
		fallthrough
	case "do-not-honor":
		fallthrough
	case "processing-error":
		fallthrough
	case "invalid-transaction":
		fallthrough
	case "invalid-amount":
		fallthrough
	case "no-such-issuer":
		fallthrough
	case "reenter-transaction":
		fallthrough
	case "cvv-mismatch":
		fallthrough
	case "lost-or-stolen":
		fallthrough
	case "insufficient-funds":
		fallthrough
	case "invalid-card-number":
		fallthrough
	case "expired-card":
		fallthrough
	case "incorrect-pin":
		fallthrough
	case "transaction-not-allowed":
		fallthrough
	case "suspected-fraud":
		fallthrough
	case "amount-limit-exceeded":
		fallthrough
	case "velocity-limit-exceeded":
		fallthrough
	case "card-not-activated":
		fallthrough
	case "issuer-not-available":
		fallthrough
	case "could-not-route":
		fallthrough
	case "cardholder-account-closed":
		fallthrough
	case "unknown-issue":
		fallthrough
	case "duplicate-transaction":
		*e = FailureCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FailureCode: %v", v)
	}
}

// GetRefund - Details of a card refund
type GetRefund struct {
	// A representation of money containing an integer value and it's currency.
	Amount      *shared.Amount            `json:"amount,omitempty"`
	CardDetails *shared.RefundCardDetails `json:"cardDetails,omitempty"`
	CreatedOn   *time.Time                `json:"createdOn,omitempty"`
	// This field is deprecated and will be removed in December 2023.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	FailureCode *FailureCode `json:"failureCode,omitempty"`
	// UUID v4
	RefundID  *string              `json:"refundID,omitempty"`
	Status    *shared.RefundStatus `json:"status,omitempty"`
	UpdatedOn *time.Time           `json:"updatedOn,omitempty"`
}

var _ error = &GetRefund{}

func (e *GetRefund) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
