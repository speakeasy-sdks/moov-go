// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreatedReversalSynchronousRefundResponseFailureCode - This field is deprecated and will be removed in December 2023.
//
// Deprecated: this type will be removed in a future release, please migrate away from it as soon as possible.
type CreatedReversalSynchronousRefundResponseFailureCode string

const (
	CreatedReversalSynchronousRefundResponseFailureCodeCallIssuer              CreatedReversalSynchronousRefundResponseFailureCode = "call-issuer"
	CreatedReversalSynchronousRefundResponseFailureCodeDoNotHonor              CreatedReversalSynchronousRefundResponseFailureCode = "do-not-honor"
	CreatedReversalSynchronousRefundResponseFailureCodeProcessingError         CreatedReversalSynchronousRefundResponseFailureCode = "processing-error"
	CreatedReversalSynchronousRefundResponseFailureCodeInvalidTransaction      CreatedReversalSynchronousRefundResponseFailureCode = "invalid-transaction"
	CreatedReversalSynchronousRefundResponseFailureCodeInvalidAmount           CreatedReversalSynchronousRefundResponseFailureCode = "invalid-amount"
	CreatedReversalSynchronousRefundResponseFailureCodeNoSuchIssuer            CreatedReversalSynchronousRefundResponseFailureCode = "no-such-issuer"
	CreatedReversalSynchronousRefundResponseFailureCodeReenterTransaction      CreatedReversalSynchronousRefundResponseFailureCode = "reenter-transaction"
	CreatedReversalSynchronousRefundResponseFailureCodeCvvMismatch             CreatedReversalSynchronousRefundResponseFailureCode = "cvv-mismatch"
	CreatedReversalSynchronousRefundResponseFailureCodeLostOrStolen            CreatedReversalSynchronousRefundResponseFailureCode = "lost-or-stolen"
	CreatedReversalSynchronousRefundResponseFailureCodeInsufficientFunds       CreatedReversalSynchronousRefundResponseFailureCode = "insufficient-funds"
	CreatedReversalSynchronousRefundResponseFailureCodeInvalidCardNumber       CreatedReversalSynchronousRefundResponseFailureCode = "invalid-card-number"
	CreatedReversalSynchronousRefundResponseFailureCodeExpiredCard             CreatedReversalSynchronousRefundResponseFailureCode = "expired-card"
	CreatedReversalSynchronousRefundResponseFailureCodeIncorrectPin            CreatedReversalSynchronousRefundResponseFailureCode = "incorrect-pin"
	CreatedReversalSynchronousRefundResponseFailureCodeTransactionNotAllowed   CreatedReversalSynchronousRefundResponseFailureCode = "transaction-not-allowed"
	CreatedReversalSynchronousRefundResponseFailureCodeSuspectedFraud          CreatedReversalSynchronousRefundResponseFailureCode = "suspected-fraud"
	CreatedReversalSynchronousRefundResponseFailureCodeAmountLimitExceeded     CreatedReversalSynchronousRefundResponseFailureCode = "amount-limit-exceeded"
	CreatedReversalSynchronousRefundResponseFailureCodeVelocityLimitExceeded   CreatedReversalSynchronousRefundResponseFailureCode = "velocity-limit-exceeded"
	CreatedReversalSynchronousRefundResponseFailureCodeCardNotActivated        CreatedReversalSynchronousRefundResponseFailureCode = "card-not-activated"
	CreatedReversalSynchronousRefundResponseFailureCodeIssuerNotAvailable      CreatedReversalSynchronousRefundResponseFailureCode = "issuer-not-available"
	CreatedReversalSynchronousRefundResponseFailureCodeCouldNotRoute           CreatedReversalSynchronousRefundResponseFailureCode = "could-not-route"
	CreatedReversalSynchronousRefundResponseFailureCodeCardholderAccountClosed CreatedReversalSynchronousRefundResponseFailureCode = "cardholder-account-closed"
	CreatedReversalSynchronousRefundResponseFailureCodeUnknownIssue            CreatedReversalSynchronousRefundResponseFailureCode = "unknown-issue"
	CreatedReversalSynchronousRefundResponseFailureCodeDuplicateTransaction    CreatedReversalSynchronousRefundResponseFailureCode = "duplicate-transaction"
)

func (e CreatedReversalSynchronousRefundResponseFailureCode) ToPointer() *CreatedReversalSynchronousRefundResponseFailureCode {
	return &e
}

func (e *CreatedReversalSynchronousRefundResponseFailureCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "call-issuer":
		fallthrough
	case "do-not-honor":
		fallthrough
	case "processing-error":
		fallthrough
	case "invalid-transaction":
		fallthrough
	case "invalid-amount":
		fallthrough
	case "no-such-issuer":
		fallthrough
	case "reenter-transaction":
		fallthrough
	case "cvv-mismatch":
		fallthrough
	case "lost-or-stolen":
		fallthrough
	case "insufficient-funds":
		fallthrough
	case "invalid-card-number":
		fallthrough
	case "expired-card":
		fallthrough
	case "incorrect-pin":
		fallthrough
	case "transaction-not-allowed":
		fallthrough
	case "suspected-fraud":
		fallthrough
	case "amount-limit-exceeded":
		fallthrough
	case "velocity-limit-exceeded":
		fallthrough
	case "card-not-activated":
		fallthrough
	case "issuer-not-available":
		fallthrough
	case "could-not-route":
		fallthrough
	case "cardholder-account-closed":
		fallthrough
	case "unknown-issue":
		fallthrough
	case "duplicate-transaction":
		*e = CreatedReversalSynchronousRefundResponseFailureCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedReversalSynchronousRefundResponseFailureCode: %v", v)
	}
}

// CreatedReversalSynchronousRefundResponse - Details of a card refund
type CreatedReversalSynchronousRefundResponse struct {
	// A representation of money containing an integer value and it's currency.
	Amount      *Amount            `json:"amount,omitempty"`
	CardDetails *RefundCardDetails `json:"cardDetails,omitempty"`
	CreatedOn   *time.Time         `json:"createdOn,omitempty"`
	// This field is deprecated and will be removed in December 2023.
	//
	// Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible.
	FailureCode *CreatedReversalSynchronousRefundResponseFailureCode `json:"failureCode,omitempty"`
	// UUID v4
	RefundID  *string       `json:"refundID,omitempty"`
	Status    *RefundStatus `json:"status,omitempty"`
	UpdatedOn *time.Time    `json:"updatedOn,omitempty"`
}

func (o *CreatedReversalSynchronousRefundResponse) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *CreatedReversalSynchronousRefundResponse) GetCardDetails() *RefundCardDetails {
	if o == nil {
		return nil
	}
	return o.CardDetails
}

func (o *CreatedReversalSynchronousRefundResponse) GetCreatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedOn
}

func (o *CreatedReversalSynchronousRefundResponse) GetFailureCode() *CreatedReversalSynchronousRefundResponseFailureCode {
	if o == nil {
		return nil
	}
	return o.FailureCode
}

func (o *CreatedReversalSynchronousRefundResponse) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *CreatedReversalSynchronousRefundResponse) GetStatus() *RefundStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreatedReversalSynchronousRefundResponse) GetUpdatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedOn
}

// CreatedReversal - Successfully initiated a reversal
type CreatedReversal struct {
	Cancellation *CreatedCancellation                      `json:"cancellation,omitempty"`
	Refund       *CreatedReversalSynchronousRefundResponse `json:"refund,omitempty"`
}

func (o *CreatedReversal) GetCancellation() *CreatedCancellation {
	if o == nil {
		return nil
	}
	return o.Cancellation
}

func (o *CreatedReversal) GetRefund() *CreatedReversalSynchronousRefundResponse {
	if o == nil {
		return nil
	}
	return o.Refund
}
