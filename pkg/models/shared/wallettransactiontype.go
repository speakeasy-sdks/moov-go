// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// WalletTransactionType - Wallet transaction type
type WalletTransactionType string

const (
	WalletTransactionTypeAchReversal                  WalletTransactionType = "ach-reversal"
	WalletTransactionTypeCardPayment                  WalletTransactionType = "card-payment"
	WalletTransactionTypeCashOut                      WalletTransactionType = "cash-out"
	WalletTransactionTypeDispute                      WalletTransactionType = "dispute"
	WalletTransactionTypeDisputeReversal              WalletTransactionType = "dispute-reversal"
	WalletTransactionTypeFacilitatorFee               WalletTransactionType = "facilitator-fee"
	WalletTransactionTypeIssuingRefund                WalletTransactionType = "issuing-refund"
	WalletTransactionTypeIssuingTransaction           WalletTransactionType = "issuing-transaction"
	WalletTransactionTypeIssuingTransactionAdjustment WalletTransactionType = "issuing-transaction-adjustment"
	WalletTransactionTypeIssuingAuthRelease           WalletTransactionType = "issuing-auth-release"
	WalletTransactionTypeIssuingDecline               WalletTransactionType = "issuing-decline"
	WalletTransactionTypeMoovFee                      WalletTransactionType = "moov-fee"
	WalletTransactionTypePayment                      WalletTransactionType = "payment"
	WalletTransactionTypePayout                       WalletTransactionType = "payout"
	WalletTransactionTypeRefund                       WalletTransactionType = "refund"
	WalletTransactionTypeRefundFailure                WalletTransactionType = "refund-failure"
	WalletTransactionTypeTopUp                        WalletTransactionType = "top-up"
	WalletTransactionTypeWalletTransfer               WalletTransactionType = "wallet-transfer"
)

func (e WalletTransactionType) ToPointer() *WalletTransactionType {
	return &e
}

func (e *WalletTransactionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ach-reversal":
		fallthrough
	case "card-payment":
		fallthrough
	case "cash-out":
		fallthrough
	case "dispute":
		fallthrough
	case "dispute-reversal":
		fallthrough
	case "facilitator-fee":
		fallthrough
	case "issuing-refund":
		fallthrough
	case "issuing-transaction":
		fallthrough
	case "issuing-transaction-adjustment":
		fallthrough
	case "issuing-auth-release":
		fallthrough
	case "issuing-decline":
		fallthrough
	case "moov-fee":
		fallthrough
	case "payment":
		fallthrough
	case "payout":
		fallthrough
	case "refund":
		fallthrough
	case "refund-failure":
		fallthrough
	case "top-up":
		fallthrough
	case "wallet-transfer":
		*e = WalletTransactionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WalletTransactionType: %v", v)
	}
}
