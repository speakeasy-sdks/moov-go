// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type PaymentMethodType string

const (
	PaymentMethodTypePaymentMethodWallet      PaymentMethodType = "PaymentMethodWallet"
	PaymentMethodTypePaymentMethodBankAccount PaymentMethodType = "PaymentMethodBankAccount"
	PaymentMethodTypePaymentMethodCard        PaymentMethodType = "PaymentMethodCard"
	PaymentMethodTypePaymentMethodApplePay    PaymentMethodType = "PaymentMethodApplePay"
)

type PaymentMethod struct {
	PaymentMethodWallet      *PaymentMethodWallet
	PaymentMethodBankAccount *PaymentMethodBankAccount
	PaymentMethodCard        *PaymentMethodCard
	PaymentMethodApplePay    *PaymentMethodApplePay

	Type PaymentMethodType
}

func CreatePaymentMethodPaymentMethodWallet(paymentMethodWallet PaymentMethodWallet) PaymentMethod {
	typ := PaymentMethodTypePaymentMethodWallet

	return PaymentMethod{
		PaymentMethodWallet: &paymentMethodWallet,
		Type:                typ,
	}
}

func CreatePaymentMethodPaymentMethodBankAccount(paymentMethodBankAccount PaymentMethodBankAccount) PaymentMethod {
	typ := PaymentMethodTypePaymentMethodBankAccount

	return PaymentMethod{
		PaymentMethodBankAccount: &paymentMethodBankAccount,
		Type:                     typ,
	}
}

func CreatePaymentMethodPaymentMethodCard(paymentMethodCard PaymentMethodCard) PaymentMethod {
	typ := PaymentMethodTypePaymentMethodCard

	return PaymentMethod{
		PaymentMethodCard: &paymentMethodCard,
		Type:              typ,
	}
}

func CreatePaymentMethodPaymentMethodApplePay(paymentMethodApplePay PaymentMethodApplePay) PaymentMethod {
	typ := PaymentMethodTypePaymentMethodApplePay

	return PaymentMethod{
		PaymentMethodApplePay: &paymentMethodApplePay,
		Type:                  typ,
	}
}

func (u *PaymentMethod) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	paymentMethodWallet := new(PaymentMethodWallet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodWallet); err == nil {
		u.PaymentMethodWallet = paymentMethodWallet
		u.Type = PaymentMethodTypePaymentMethodWallet
		return nil
	}

	paymentMethodBankAccount := new(PaymentMethodBankAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodBankAccount); err == nil {
		u.PaymentMethodBankAccount = paymentMethodBankAccount
		u.Type = PaymentMethodTypePaymentMethodBankAccount
		return nil
	}

	paymentMethodCard := new(PaymentMethodCard)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodCard); err == nil {
		u.PaymentMethodCard = paymentMethodCard
		u.Type = PaymentMethodTypePaymentMethodCard
		return nil
	}

	paymentMethodApplePay := new(PaymentMethodApplePay)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodApplePay); err == nil {
		u.PaymentMethodApplePay = paymentMethodApplePay
		u.Type = PaymentMethodTypePaymentMethodApplePay
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentMethod) MarshalJSON() ([]byte, error) {
	if u.PaymentMethodWallet != nil {
		return json.Marshal(u.PaymentMethodWallet)
	}

	if u.PaymentMethodBankAccount != nil {
		return json.Marshal(u.PaymentMethodBankAccount)
	}

	if u.PaymentMethodCard != nil {
		return json.Marshal(u.PaymentMethodCard)
	}

	if u.PaymentMethodApplePay != nil {
		return json.Marshal(u.PaymentMethodApplePay)
	}

	return nil, nil
}
