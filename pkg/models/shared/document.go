// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type DocumentType string

const (
	DocumentTypeDriversLicense DocumentType = "DriversLicense"
	DocumentTypePassport       DocumentType = "Passport"
	DocumentTypeUtilityBill    DocumentType = "UtilityBill"
	DocumentTypeBankStatement  DocumentType = "BankStatement"
)

func (e DocumentType) ToPointer() *DocumentType {
	return &e
}

func (e *DocumentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DriversLicense":
		fallthrough
	case "Passport":
		fallthrough
	case "UtilityBill":
		fallthrough
	case "BankStatement":
		*e = DocumentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DocumentType: %v", v)
	}
}

// Document - Describes an uploaded file
type Document struct {
	ContentType string `json:"contentType"`
	// A unique identifier for this document
	DocumentID string `json:"documentID"`
	// Optional array of errors encountered dring automated parsing.
	ParseErrors []string     `json:"parseErrors,omitempty"`
	Type        DocumentType `json:"type"`
	UploadedAt  time.Time    `json:"uploadedAt"`
}

func (o *Document) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *Document) GetDocumentID() string {
	if o == nil {
		return ""
	}
	return o.DocumentID
}

func (o *Document) GetParseErrors() []string {
	if o == nil {
		return nil
	}
	return o.ParseErrors
}

func (o *Document) GetType() DocumentType {
	if o == nil {
		return DocumentType("")
	}
	return o.Type
}

func (o *Document) GetUploadedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UploadedAt
}
