// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type RefundPostResponseType string

const (
	RefundPostResponseTypeCreatedRefund RefundPostResponseType = "CreatedRefund"
	RefundPostResponseTypeGetRefund     RefundPostResponseType = "GetRefund"
)

type RefundPostResponse struct {
	CreatedRefund *CreatedRefund
	GetRefund     *GetRefund

	Type RefundPostResponseType
}

func CreateRefundPostResponseCreatedRefund(createdRefund CreatedRefund) RefundPostResponse {
	typ := RefundPostResponseTypeCreatedRefund

	return RefundPostResponse{
		CreatedRefund: &createdRefund,
		Type:          typ,
	}
}

func CreateRefundPostResponseGetRefund(getRefund GetRefund) RefundPostResponse {
	typ := RefundPostResponseTypeGetRefund

	return RefundPostResponse{
		GetRefund: &getRefund,
		Type:      typ,
	}
}

func (u *RefundPostResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	createdRefund := new(CreatedRefund)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&createdRefund); err == nil {
		u.CreatedRefund = createdRefund
		u.Type = RefundPostResponseTypeCreatedRefund
		return nil
	}

	getRefund := new(GetRefund)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&getRefund); err == nil {
		u.GetRefund = getRefund
		u.Type = RefundPostResponseTypeGetRefund
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RefundPostResponse) MarshalJSON() ([]byte, error) {
	if u.CreatedRefund != nil {
		return json.Marshal(u.CreatedRefund)
	}

	if u.GetRefund != nil {
		return json.Marshal(u.GetRefund)
	}

	return nil, errors.New("could not marshal union type: all fields are null")

}
