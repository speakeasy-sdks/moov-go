// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CardFailureCode string

const (
	CardFailureCodeCallIssuer              CardFailureCode = "call-issuer"
	CardFailureCodeDoNotHonor              CardFailureCode = "do-not-honor"
	CardFailureCodeProcessingError         CardFailureCode = "processing-error"
	CardFailureCodeInvalidTransaction      CardFailureCode = "invalid-transaction"
	CardFailureCodeInvalidAmount           CardFailureCode = "invalid-amount"
	CardFailureCodeNoSuchIssuer            CardFailureCode = "no-such-issuer"
	CardFailureCodeReenterTransaction      CardFailureCode = "reenter-transaction"
	CardFailureCodeCvvMismatch             CardFailureCode = "cvv-mismatch"
	CardFailureCodeLostOrStolen            CardFailureCode = "lost-or-stolen"
	CardFailureCodeInsufficientFunds       CardFailureCode = "insufficient-funds"
	CardFailureCodeInvalidCardNumber       CardFailureCode = "invalid-card-number"
	CardFailureCodeExpiredCard             CardFailureCode = "expired-card"
	CardFailureCodeIncorrectPin            CardFailureCode = "incorrect-pin"
	CardFailureCodeTransactionNotAllowed   CardFailureCode = "transaction-not-allowed"
	CardFailureCodeSuspectedFraud          CardFailureCode = "suspected-fraud"
	CardFailureCodeAmountLimitExceeded     CardFailureCode = "amount-limit-exceeded"
	CardFailureCodeVelocityLimitExceeded   CardFailureCode = "velocity-limit-exceeded"
	CardFailureCodeCardNotActivated        CardFailureCode = "card-not-activated"
	CardFailureCodeIssuerNotAvailable      CardFailureCode = "issuer-not-available"
	CardFailureCodeCouldNotRoute           CardFailureCode = "could-not-route"
	CardFailureCodeCardholderAccountClosed CardFailureCode = "cardholder-account-closed"
	CardFailureCodeUnknownIssue            CardFailureCode = "unknown-issue"
	CardFailureCodeDuplicateTransaction    CardFailureCode = "duplicate-transaction"
)

func (e CardFailureCode) ToPointer() *CardFailureCode {
	return &e
}

func (e *CardFailureCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "call-issuer":
		fallthrough
	case "do-not-honor":
		fallthrough
	case "processing-error":
		fallthrough
	case "invalid-transaction":
		fallthrough
	case "invalid-amount":
		fallthrough
	case "no-such-issuer":
		fallthrough
	case "reenter-transaction":
		fallthrough
	case "cvv-mismatch":
		fallthrough
	case "lost-or-stolen":
		fallthrough
	case "insufficient-funds":
		fallthrough
	case "invalid-card-number":
		fallthrough
	case "expired-card":
		fallthrough
	case "incorrect-pin":
		fallthrough
	case "transaction-not-allowed":
		fallthrough
	case "suspected-fraud":
		fallthrough
	case "amount-limit-exceeded":
		fallthrough
	case "velocity-limit-exceeded":
		fallthrough
	case "card-not-activated":
		fallthrough
	case "issuer-not-available":
		fallthrough
	case "could-not-route":
		fallthrough
	case "cardholder-account-closed":
		fallthrough
	case "unknown-issue":
		fallthrough
	case "duplicate-transaction":
		*e = CardFailureCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CardFailureCode: %v", v)
	}
}
