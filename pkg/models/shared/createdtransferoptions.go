// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type CreatedTransferOptionsDestinationOptionsType string

const (
	CreatedTransferOptionsDestinationOptionsTypePaymentMethodWallet      CreatedTransferOptionsDestinationOptionsType = "PaymentMethodWallet"
	CreatedTransferOptionsDestinationOptionsTypePaymentMethodBankAccount CreatedTransferOptionsDestinationOptionsType = "PaymentMethodBankAccount"
	CreatedTransferOptionsDestinationOptionsTypePaymentMethodCard        CreatedTransferOptionsDestinationOptionsType = "PaymentMethodCard"
	CreatedTransferOptionsDestinationOptionsTypePaymentMethodApplePay    CreatedTransferOptionsDestinationOptionsType = "PaymentMethodApplePay"
)

type CreatedTransferOptionsDestinationOptions struct {
	PaymentMethodWallet      *PaymentMethodWallet
	PaymentMethodBankAccount *PaymentMethodBankAccount
	PaymentMethodCard        *PaymentMethodCard
	PaymentMethodApplePay    *PaymentMethodApplePay

	Type CreatedTransferOptionsDestinationOptionsType
}

func CreateCreatedTransferOptionsDestinationOptionsPaymentMethodWallet(paymentMethodWallet PaymentMethodWallet) CreatedTransferOptionsDestinationOptions {
	typ := CreatedTransferOptionsDestinationOptionsTypePaymentMethodWallet

	return CreatedTransferOptionsDestinationOptions{
		PaymentMethodWallet: &paymentMethodWallet,
		Type:                typ,
	}
}

func CreateCreatedTransferOptionsDestinationOptionsPaymentMethodBankAccount(paymentMethodBankAccount PaymentMethodBankAccount) CreatedTransferOptionsDestinationOptions {
	typ := CreatedTransferOptionsDestinationOptionsTypePaymentMethodBankAccount

	return CreatedTransferOptionsDestinationOptions{
		PaymentMethodBankAccount: &paymentMethodBankAccount,
		Type:                     typ,
	}
}

func CreateCreatedTransferOptionsDestinationOptionsPaymentMethodCard(paymentMethodCard PaymentMethodCard) CreatedTransferOptionsDestinationOptions {
	typ := CreatedTransferOptionsDestinationOptionsTypePaymentMethodCard

	return CreatedTransferOptionsDestinationOptions{
		PaymentMethodCard: &paymentMethodCard,
		Type:              typ,
	}
}

func CreateCreatedTransferOptionsDestinationOptionsPaymentMethodApplePay(paymentMethodApplePay PaymentMethodApplePay) CreatedTransferOptionsDestinationOptions {
	typ := CreatedTransferOptionsDestinationOptionsTypePaymentMethodApplePay

	return CreatedTransferOptionsDestinationOptions{
		PaymentMethodApplePay: &paymentMethodApplePay,
		Type:                  typ,
	}
}

func (u *CreatedTransferOptionsDestinationOptions) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	paymentMethodWallet := new(PaymentMethodWallet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodWallet); err == nil {
		u.PaymentMethodWallet = paymentMethodWallet
		u.Type = CreatedTransferOptionsDestinationOptionsTypePaymentMethodWallet
		return nil
	}

	paymentMethodBankAccount := new(PaymentMethodBankAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodBankAccount); err == nil {
		u.PaymentMethodBankAccount = paymentMethodBankAccount
		u.Type = CreatedTransferOptionsDestinationOptionsTypePaymentMethodBankAccount
		return nil
	}

	paymentMethodCard := new(PaymentMethodCard)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodCard); err == nil {
		u.PaymentMethodCard = paymentMethodCard
		u.Type = CreatedTransferOptionsDestinationOptionsTypePaymentMethodCard
		return nil
	}

	paymentMethodApplePay := new(PaymentMethodApplePay)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodApplePay); err == nil {
		u.PaymentMethodApplePay = paymentMethodApplePay
		u.Type = CreatedTransferOptionsDestinationOptionsTypePaymentMethodApplePay
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreatedTransferOptionsDestinationOptions) MarshalJSON() ([]byte, error) {
	if u.PaymentMethodWallet != nil {
		return json.Marshal(u.PaymentMethodWallet)
	}

	if u.PaymentMethodBankAccount != nil {
		return json.Marshal(u.PaymentMethodBankAccount)
	}

	if u.PaymentMethodCard != nil {
		return json.Marshal(u.PaymentMethodCard)
	}

	if u.PaymentMethodApplePay != nil {
		return json.Marshal(u.PaymentMethodApplePay)
	}

	return nil, nil
}

type CreatedTransferOptionsSourceOptionsType string

const (
	CreatedTransferOptionsSourceOptionsTypePaymentMethodWallet      CreatedTransferOptionsSourceOptionsType = "PaymentMethodWallet"
	CreatedTransferOptionsSourceOptionsTypePaymentMethodBankAccount CreatedTransferOptionsSourceOptionsType = "PaymentMethodBankAccount"
	CreatedTransferOptionsSourceOptionsTypePaymentMethodCard        CreatedTransferOptionsSourceOptionsType = "PaymentMethodCard"
	CreatedTransferOptionsSourceOptionsTypePaymentMethodApplePay    CreatedTransferOptionsSourceOptionsType = "PaymentMethodApplePay"
)

type CreatedTransferOptionsSourceOptions struct {
	PaymentMethodWallet      *PaymentMethodWallet
	PaymentMethodBankAccount *PaymentMethodBankAccount
	PaymentMethodCard        *PaymentMethodCard
	PaymentMethodApplePay    *PaymentMethodApplePay

	Type CreatedTransferOptionsSourceOptionsType
}

func CreateCreatedTransferOptionsSourceOptionsPaymentMethodWallet(paymentMethodWallet PaymentMethodWallet) CreatedTransferOptionsSourceOptions {
	typ := CreatedTransferOptionsSourceOptionsTypePaymentMethodWallet

	return CreatedTransferOptionsSourceOptions{
		PaymentMethodWallet: &paymentMethodWallet,
		Type:                typ,
	}
}

func CreateCreatedTransferOptionsSourceOptionsPaymentMethodBankAccount(paymentMethodBankAccount PaymentMethodBankAccount) CreatedTransferOptionsSourceOptions {
	typ := CreatedTransferOptionsSourceOptionsTypePaymentMethodBankAccount

	return CreatedTransferOptionsSourceOptions{
		PaymentMethodBankAccount: &paymentMethodBankAccount,
		Type:                     typ,
	}
}

func CreateCreatedTransferOptionsSourceOptionsPaymentMethodCard(paymentMethodCard PaymentMethodCard) CreatedTransferOptionsSourceOptions {
	typ := CreatedTransferOptionsSourceOptionsTypePaymentMethodCard

	return CreatedTransferOptionsSourceOptions{
		PaymentMethodCard: &paymentMethodCard,
		Type:              typ,
	}
}

func CreateCreatedTransferOptionsSourceOptionsPaymentMethodApplePay(paymentMethodApplePay PaymentMethodApplePay) CreatedTransferOptionsSourceOptions {
	typ := CreatedTransferOptionsSourceOptionsTypePaymentMethodApplePay

	return CreatedTransferOptionsSourceOptions{
		PaymentMethodApplePay: &paymentMethodApplePay,
		Type:                  typ,
	}
}

func (u *CreatedTransferOptionsSourceOptions) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	paymentMethodWallet := new(PaymentMethodWallet)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodWallet); err == nil {
		u.PaymentMethodWallet = paymentMethodWallet
		u.Type = CreatedTransferOptionsSourceOptionsTypePaymentMethodWallet
		return nil
	}

	paymentMethodBankAccount := new(PaymentMethodBankAccount)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodBankAccount); err == nil {
		u.PaymentMethodBankAccount = paymentMethodBankAccount
		u.Type = CreatedTransferOptionsSourceOptionsTypePaymentMethodBankAccount
		return nil
	}

	paymentMethodCard := new(PaymentMethodCard)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodCard); err == nil {
		u.PaymentMethodCard = paymentMethodCard
		u.Type = CreatedTransferOptionsSourceOptionsTypePaymentMethodCard
		return nil
	}

	paymentMethodApplePay := new(PaymentMethodApplePay)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentMethodApplePay); err == nil {
		u.PaymentMethodApplePay = paymentMethodApplePay
		u.Type = CreatedTransferOptionsSourceOptionsTypePaymentMethodApplePay
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreatedTransferOptionsSourceOptions) MarshalJSON() ([]byte, error) {
	if u.PaymentMethodWallet != nil {
		return json.Marshal(u.PaymentMethodWallet)
	}

	if u.PaymentMethodBankAccount != nil {
		return json.Marshal(u.PaymentMethodBankAccount)
	}

	if u.PaymentMethodCard != nil {
		return json.Marshal(u.PaymentMethodCard)
	}

	if u.PaymentMethodApplePay != nil {
		return json.Marshal(u.PaymentMethodApplePay)
	}

	return nil, nil
}

// CreatedTransferOptions - Succesfully created transfer options
type CreatedTransferOptions struct {
	DestinationOptions []CreatedTransferOptionsDestinationOptions `json:"destinationOptions,omitempty"`
	SourceOptions      []CreatedTransferOptionsSourceOptions      `json:"sourceOptions,omitempty"`
}

func (o *CreatedTransferOptions) GetDestinationOptions() []CreatedTransferOptionsDestinationOptions {
	if o == nil {
		return nil
	}
	return o.DestinationOptions
}

func (o *CreatedTransferOptions) GetSourceOptions() []CreatedTransferOptionsSourceOptions {
	if o == nil {
		return nil
	}
	return o.SourceOptions
}
