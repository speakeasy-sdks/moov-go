// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RequirementErrorCode string

const (
	RequirementErrorCodeInvalidValue                RequirementErrorCode = "invalid-value"
	RequirementErrorCodeFailedAutomaticVerification RequirementErrorCode = "failed-automatic-verification"
	RequirementErrorCodeFailedOther                 RequirementErrorCode = "failed-other"
	RequirementErrorCodeInvalidAddress              RequirementErrorCode = "invalid-address"
	RequirementErrorCodeAddressRestricted           RequirementErrorCode = "address-restricted"
	RequirementErrorCodeTaxIDMismatch               RequirementErrorCode = "tax-id-mismatch"
	RequirementErrorCodeDocumentIDMismatch          RequirementErrorCode = "document-id-mismatch"
	RequirementErrorCodeDocumentDateOfBirthMismatch RequirementErrorCode = "document-date-of-birth-mismatch"
	RequirementErrorCodeDocumentNameMismatch        RequirementErrorCode = "document-name-mismatch"
	RequirementErrorCodeDocumentAddressMismatch     RequirementErrorCode = "document-address.mismatch"
	RequirementErrorCodeDocumentNumberMismatch      RequirementErrorCode = "document-number-mismatch"
	RequirementErrorCodeDocumentIncomplete          RequirementErrorCode = "document-incomplete"
	RequirementErrorCodeDocumentFailedRisk          RequirementErrorCode = "document-failed-risk"
	RequirementErrorCodeDocumentIllegible           RequirementErrorCode = "document-illegible"
	RequirementErrorCodeDocumentUnsupported         RequirementErrorCode = "document-unsupported"
	RequirementErrorCodeDocumentNotUploaded         RequirementErrorCode = "document-not-uploaded"
	RequirementErrorCodeDocumentCorrupt             RequirementErrorCode = "document-corrupt"
	RequirementErrorCodeDocumentExpired             RequirementErrorCode = "document-expired"
)

func (e RequirementErrorCode) ToPointer() *RequirementErrorCode {
	return &e
}

func (e *RequirementErrorCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid-value":
		fallthrough
	case "failed-automatic-verification":
		fallthrough
	case "failed-other":
		fallthrough
	case "invalid-address":
		fallthrough
	case "address-restricted":
		fallthrough
	case "tax-id-mismatch":
		fallthrough
	case "document-id-mismatch":
		fallthrough
	case "document-date-of-birth-mismatch":
		fallthrough
	case "document-name-mismatch":
		fallthrough
	case "document-address.mismatch":
		fallthrough
	case "document-number-mismatch":
		fallthrough
	case "document-incomplete":
		fallthrough
	case "document-failed-risk":
		fallthrough
	case "document-illegible":
		fallthrough
	case "document-unsupported":
		fallthrough
	case "document-not-uploaded":
		fallthrough
	case "document-corrupt":
		fallthrough
	case "document-expired":
		*e = RequirementErrorCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequirementErrorCode: %v", v)
	}
}
