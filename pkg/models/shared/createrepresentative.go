// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// CreateRepresentativeAddress - Residential address for an individual. Business addresses not accepted.
type CreateRepresentativeAddress struct {
	AddressLine1    *string `json:"addressLine1,omitempty"`
	AddressLine2    *string `json:"addressLine2,omitempty"`
	City            *string `json:"city,omitempty"`
	Country         *string `json:"country,omitempty"`
	PostalCode      *string `json:"postalCode,omitempty"`
	StateOrProvince *string `json:"stateOrProvince,omitempty"`
}

func (o *CreateRepresentativeAddress) GetAddressLine1() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine1
}

func (o *CreateRepresentativeAddress) GetAddressLine2() *string {
	if o == nil {
		return nil
	}
	return o.AddressLine2
}

func (o *CreateRepresentativeAddress) GetCity() *string {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *CreateRepresentativeAddress) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *CreateRepresentativeAddress) GetPostalCode() *string {
	if o == nil {
		return nil
	}
	return o.PostalCode
}

func (o *CreateRepresentativeAddress) GetStateOrProvince() *string {
	if o == nil {
		return nil
	}
	return o.StateOrProvince
}

// CreateRepresentativeBirthDate - Birthdate for an individual
type CreateRepresentativeBirthDate struct {
	Day   int64 `json:"day"`
	Month int64 `json:"month"`
	Year  int64 `json:"year"`
}

func (o *CreateRepresentativeBirthDate) GetDay() int64 {
	if o == nil {
		return 0
	}
	return o.Day
}

func (o *CreateRepresentativeBirthDate) GetMonth() int64 {
	if o == nil {
		return 0
	}
	return o.Month
}

func (o *CreateRepresentativeBirthDate) GetYear() int64 {
	if o == nil {
		return 0
	}
	return o.Year
}

type CreateRepresentativeGovernmentIDItin struct {
	Full     *string `json:"full,omitempty"`
	LastFour *string `json:"lastFour,omitempty"`
}

func (o *CreateRepresentativeGovernmentIDItin) GetFull() *string {
	if o == nil {
		return nil
	}
	return o.Full
}

func (o *CreateRepresentativeGovernmentIDItin) GetLastFour() *string {
	if o == nil {
		return nil
	}
	return o.LastFour
}

type CreateRepresentativeGovernmentIDSsn struct {
	Full     *string `json:"full,omitempty"`
	LastFour *string `json:"lastFour,omitempty"`
}

func (o *CreateRepresentativeGovernmentIDSsn) GetFull() *string {
	if o == nil {
		return nil
	}
	return o.Full
}

func (o *CreateRepresentativeGovernmentIDSsn) GetLastFour() *string {
	if o == nil {
		return nil
	}
	return o.LastFour
}

type CreateRepresentativeGovernmentID struct {
	Itin *CreateRepresentativeGovernmentIDItin `json:"itin,omitempty"`
	Ssn  *CreateRepresentativeGovernmentIDSsn  `json:"ssn,omitempty"`
}

func (o *CreateRepresentativeGovernmentID) GetItin() *CreateRepresentativeGovernmentIDItin {
	if o == nil {
		return nil
	}
	return o.Itin
}

func (o *CreateRepresentativeGovernmentID) GetSsn() *CreateRepresentativeGovernmentIDSsn {
	if o == nil {
		return nil
	}
	return o.Ssn
}

// CreateRepresentativeName - Name for an individual
type CreateRepresentativeName struct {
	// Name this person was given. This is usually the the same as first name.
	FirstName string `json:"firstName"`
	// Family name of this person. This is usually the the same as last name.
	LastName string `json:"lastName"`
	// Name this person was given. This is usually the the same as first name.
	MiddleName *string `json:"middleName,omitempty"`
	// Suffix of a given name
	Suffix *string `json:"suffix,omitempty"`
}

func (o *CreateRepresentativeName) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *CreateRepresentativeName) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *CreateRepresentativeName) GetMiddleName() *string {
	if o == nil {
		return nil
	}
	return o.MiddleName
}

func (o *CreateRepresentativeName) GetSuffix() *string {
	if o == nil {
		return nil
	}
	return o.Suffix
}

type CreateRepresentativePhone struct {
	CountryCode *string `json:"countryCode,omitempty"`
	Number      *string `json:"number,omitempty"`
}

func (o *CreateRepresentativePhone) GetCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.CountryCode
}

func (o *CreateRepresentativePhone) GetNumber() *string {
	if o == nil {
		return nil
	}
	return o.Number
}

// CreateRepresentativeResponsibilities - Describes the job responsibilities of an individual
type CreateRepresentativeResponsibilities struct {
	// Indicates whether this individual has significant management responsibilities within the business
	IsController bool `json:"isController"`
	// If `true`, this field indicates that this individual has an ownership stake of at least 25% in the business. If the representative does not own at least 25% of the business, this field should be `false`.
	IsOwner  bool   `json:"isOwner"`
	JobTitle string `json:"jobTitle"`
	// The percentage of ownership this individual has in the business (required if `isOwner` is `true`)
	OwnershipPercentage int64 `json:"ownershipPercentage"`
}

func (o *CreateRepresentativeResponsibilities) GetIsController() bool {
	if o == nil {
		return false
	}
	return o.IsController
}

func (o *CreateRepresentativeResponsibilities) GetIsOwner() bool {
	if o == nil {
		return false
	}
	return o.IsOwner
}

func (o *CreateRepresentativeResponsibilities) GetJobTitle() string {
	if o == nil {
		return ""
	}
	return o.JobTitle
}

func (o *CreateRepresentativeResponsibilities) GetOwnershipPercentage() int64 {
	if o == nil {
		return 0
	}
	return o.OwnershipPercentage
}

// CreateRepresentative - Describes the fields available when creating a representative
type CreateRepresentative struct {
	// Residential address for an individual. Business addresses not accepted.
	Address   *CreateRepresentativeAddress   `json:"address,omitempty"`
	BirthDate *CreateRepresentativeBirthDate `json:"birthDate,omitempty"`
	// Email Address
	Email            *string                               `json:"email,omitempty"`
	GovernmentID     *CreateRepresentativeGovernmentID     `json:"governmentID,omitempty"`
	Name             *CreateRepresentativeName             `json:"name,omitempty"`
	Phone            *CreateRepresentativePhone            `json:"phone,omitempty"`
	Responsibilities *CreateRepresentativeResponsibilities `json:"responsibilities,omitempty"`
}

func (o *CreateRepresentative) GetAddress() *CreateRepresentativeAddress {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *CreateRepresentative) GetBirthDate() *CreateRepresentativeBirthDate {
	if o == nil {
		return nil
	}
	return o.BirthDate
}

func (o *CreateRepresentative) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *CreateRepresentative) GetGovernmentID() *CreateRepresentativeGovernmentID {
	if o == nil {
		return nil
	}
	return o.GovernmentID
}

func (o *CreateRepresentative) GetName() *CreateRepresentativeName {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateRepresentative) GetPhone() *CreateRepresentativePhone {
	if o == nil {
		return nil
	}
	return o.Phone
}

func (o *CreateRepresentative) GetResponsibilities() *CreateRepresentativeResponsibilities {
	if o == nil {
		return nil
	}
	return o.Responsibilities
}
