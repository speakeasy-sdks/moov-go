// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type AccessTokenResponseType string

const (
	AccessTokenResponseTypeClientCredentialsGrantToAccessTokenResponse AccessTokenResponseType = "ClientCredentialsGrantToAccessTokenResponse"
)

type AccessTokenResponse struct {
	ClientCredentialsGrantToAccessTokenResponse *ClientCredentialsGrantToAccessTokenResponse

	Type AccessTokenResponseType
}

func CreateAccessTokenResponseClientCredentialsGrantToAccessTokenResponse(clientCredentialsGrantToAccessTokenResponse ClientCredentialsGrantToAccessTokenResponse) AccessTokenResponse {
	typ := AccessTokenResponseTypeClientCredentialsGrantToAccessTokenResponse

	return AccessTokenResponse{
		ClientCredentialsGrantToAccessTokenResponse: &clientCredentialsGrantToAccessTokenResponse,
		Type: typ,
	}
}

func (u *AccessTokenResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	clientCredentialsGrantToAccessTokenResponse := new(ClientCredentialsGrantToAccessTokenResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&clientCredentialsGrantToAccessTokenResponse); err == nil {
		u.ClientCredentialsGrantToAccessTokenResponse = clientCredentialsGrantToAccessTokenResponse
		u.Type = AccessTokenResponseTypeClientCredentialsGrantToAccessTokenResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AccessTokenResponse) MarshalJSON() ([]byte, error) {
	if u.ClientCredentialsGrantToAccessTokenResponse != nil {
		return json.Marshal(u.ClientCredentialsGrantToAccessTokenResponse)
	}

	return nil, nil
}
