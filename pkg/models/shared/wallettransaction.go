// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/moov-go/pkg/utils"
	"time"
)

// WalletTransaction - A transaction that funds or deducts from the wallet.
type WalletTransaction struct {
	// The wallet's total available balance after recording a completed transaction. The value is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.
	AvailableBalance *int64     `json:"availableBalance,omitempty"`
	CompletedOn      *time.Time `json:"completedOn,omitempty"`
	CreatedOn        *time.Time `json:"createdOn,omitempty"`
	// A 3-letter ISO 4217 currency code
	Currency *string `json:"currency,omitempty"`
	// Total fees paid for the transaction. The value is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.
	Fee *int64 `json:"fee,omitempty"`
	// The total transaction amount. The amount is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.
	GrossAmount *int64 `json:"grossAmount,omitempty"`
	// Detailed description of the transaction
	Memo *string `json:"memo,omitempty"`
	// Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. The amount is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.
	NetAmount *int64 `json:"netAmount,omitempty"`
	// The ID of the Moov object to which this transaction is related.
	SourceID *string `json:"sourceID,omitempty"`
	// Wallet transaction source type
	SourceType *WalletTransactionSourceType `json:"sourceType,omitempty"`
	// Wallet transaction status
	Status *WalletTransactionStatus `json:"status,omitempty"`
	// UUID v4
	TransactionID *string `json:"transactionID,omitempty"`
	// Wallet transaction type
	TransactionType *WalletTransactionType `json:"transactionType,omitempty"`
	// UUID v4
	WalletID *string `json:"walletID,omitempty"`
}

func (w WalletTransaction) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WalletTransaction) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WalletTransaction) GetAvailableBalance() *int64 {
	if o == nil {
		return nil
	}
	return o.AvailableBalance
}

func (o *WalletTransaction) GetCompletedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CompletedOn
}

func (o *WalletTransaction) GetCreatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedOn
}

func (o *WalletTransaction) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *WalletTransaction) GetFee() *int64 {
	if o == nil {
		return nil
	}
	return o.Fee
}

func (o *WalletTransaction) GetGrossAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.GrossAmount
}

func (o *WalletTransaction) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *WalletTransaction) GetNetAmount() *int64 {
	if o == nil {
		return nil
	}
	return o.NetAmount
}

func (o *WalletTransaction) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *WalletTransaction) GetSourceType() *WalletTransactionSourceType {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *WalletTransaction) GetStatus() *WalletTransactionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *WalletTransaction) GetTransactionID() *string {
	if o == nil {
		return nil
	}
	return o.TransactionID
}

func (o *WalletTransaction) GetTransactionType() *WalletTransactionType {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

func (o *WalletTransaction) GetWalletID() *string {
	if o == nil {
		return nil
	}
	return o.WalletID
}
