// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GetRefundFailureCode - This field is deprecated and will be removed in December 2023.
//
// Deprecated type: This will be removed in a future release, please migrate away from it as soon as possible.
type GetRefundFailureCode string

const (
	GetRefundFailureCodeCallIssuer              GetRefundFailureCode = "call-issuer"
	GetRefundFailureCodeDoNotHonor              GetRefundFailureCode = "do-not-honor"
	GetRefundFailureCodeProcessingError         GetRefundFailureCode = "processing-error"
	GetRefundFailureCodeInvalidTransaction      GetRefundFailureCode = "invalid-transaction"
	GetRefundFailureCodeInvalidAmount           GetRefundFailureCode = "invalid-amount"
	GetRefundFailureCodeNoSuchIssuer            GetRefundFailureCode = "no-such-issuer"
	GetRefundFailureCodeReenterTransaction      GetRefundFailureCode = "reenter-transaction"
	GetRefundFailureCodeCvvMismatch             GetRefundFailureCode = "cvv-mismatch"
	GetRefundFailureCodeLostOrStolen            GetRefundFailureCode = "lost-or-stolen"
	GetRefundFailureCodeInsufficientFunds       GetRefundFailureCode = "insufficient-funds"
	GetRefundFailureCodeInvalidCardNumber       GetRefundFailureCode = "invalid-card-number"
	GetRefundFailureCodeExpiredCard             GetRefundFailureCode = "expired-card"
	GetRefundFailureCodeIncorrectPin            GetRefundFailureCode = "incorrect-pin"
	GetRefundFailureCodeTransactionNotAllowed   GetRefundFailureCode = "transaction-not-allowed"
	GetRefundFailureCodeSuspectedFraud          GetRefundFailureCode = "suspected-fraud"
	GetRefundFailureCodeAmountLimitExceeded     GetRefundFailureCode = "amount-limit-exceeded"
	GetRefundFailureCodeVelocityLimitExceeded   GetRefundFailureCode = "velocity-limit-exceeded"
	GetRefundFailureCodeCardNotActivated        GetRefundFailureCode = "card-not-activated"
	GetRefundFailureCodeIssuerNotAvailable      GetRefundFailureCode = "issuer-not-available"
	GetRefundFailureCodeCouldNotRoute           GetRefundFailureCode = "could-not-route"
	GetRefundFailureCodeCardholderAccountClosed GetRefundFailureCode = "cardholder-account-closed"
	GetRefundFailureCodeUnknownIssue            GetRefundFailureCode = "unknown-issue"
	GetRefundFailureCodeDuplicateTransaction    GetRefundFailureCode = "duplicate-transaction"
)

func (e GetRefundFailureCode) ToPointer() *GetRefundFailureCode {
	return &e
}

func (e *GetRefundFailureCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "call-issuer":
		fallthrough
	case "do-not-honor":
		fallthrough
	case "processing-error":
		fallthrough
	case "invalid-transaction":
		fallthrough
	case "invalid-amount":
		fallthrough
	case "no-such-issuer":
		fallthrough
	case "reenter-transaction":
		fallthrough
	case "cvv-mismatch":
		fallthrough
	case "lost-or-stolen":
		fallthrough
	case "insufficient-funds":
		fallthrough
	case "invalid-card-number":
		fallthrough
	case "expired-card":
		fallthrough
	case "incorrect-pin":
		fallthrough
	case "transaction-not-allowed":
		fallthrough
	case "suspected-fraud":
		fallthrough
	case "amount-limit-exceeded":
		fallthrough
	case "velocity-limit-exceeded":
		fallthrough
	case "card-not-activated":
		fallthrough
	case "issuer-not-available":
		fallthrough
	case "could-not-route":
		fallthrough
	case "cardholder-account-closed":
		fallthrough
	case "unknown-issue":
		fallthrough
	case "duplicate-transaction":
		*e = GetRefundFailureCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRefundFailureCode: %v", v)
	}
}

// GetRefund - Details of a card refund
type GetRefund struct {
	// A representation of money containing an integer value and it's currency.
	Amount      *Amount            `json:"amount,omitempty"`
	CardDetails *RefundCardDetails `json:"cardDetails,omitempty"`
	CreatedOn   *time.Time         `json:"createdOn,omitempty"`
	// This field is deprecated and will be removed in December 2023.
	//
	// Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
	FailureCode *GetRefundFailureCode `json:"failureCode,omitempty"`
	// UUID v4
	RefundID  *string       `json:"refundID,omitempty"`
	Status    *RefundStatus `json:"status,omitempty"`
	UpdatedOn *time.Time    `json:"updatedOn,omitempty"`
}

func (o *GetRefund) GetAmount() *Amount {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetRefund) GetCardDetails() *RefundCardDetails {
	if o == nil {
		return nil
	}
	return o.CardDetails
}

func (o *GetRefund) GetCreatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedOn
}

func (o *GetRefund) GetFailureCode() *GetRefundFailureCode {
	if o == nil {
		return nil
	}
	return o.FailureCode
}

func (o *GetRefund) GetRefundID() *string {
	if o == nil {
		return nil
	}
	return o.RefundID
}

func (o *GetRefund) GetStatus() *RefundStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetRefund) GetUpdatedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedOn
}
