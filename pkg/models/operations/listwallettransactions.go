// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/moov-go/pkg/models/shared"
	"github.com/speakeasy-sdks/moov-go/pkg/utils"
	"net/http"
)

type ListWalletTransactionsRequest struct {
	// ID of the account
	AccountID string `pathParam:"style=simple,explode=false,name=accountID"`
	// Optional date-time which exclusively filters all transactions completed before this date-time
	CompletedEndDateTime *string `queryParam:"style=form,explode=true,name=completedEndDateTime"`
	// Optional date-time which inclusively filters all transactions completed after this date-time
	CompletedStartDateTime *string `queryParam:"style=form,explode=true,name=completedStartDateTime"`
	// Optional parameter to limit the number of results in the query
	Count *int64 `default:"20" queryParam:"style=form,explode=true,name=count"`
	// Optional date-time which exclusively filters all transactions created before this date-time
	CreatedEndDateTime *string `queryParam:"style=form,explode=true,name=createdEndDateTime"`
	// Optional date-time which inclusively filters all transactions created after this date-time
	CreatedStartDateTime *string `queryParam:"style=form,explode=true,name=createdStartDateTime"`
	// The number of items to offset before starting to collect the result set
	Skip *int64 `queryParam:"style=form,explode=true,name=skip"`
	// Optional parameter to filter by source ID
	SourceID *string `queryParam:"style=form,explode=true,name=sourceID"`
	// Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction)
	SourceType *string `queryParam:"style=form,explode=true,name=sourceType"`
	// Optional parameter to filter by status (`pending` or `completed`)
	Status *string `queryParam:"style=form,explode=true,name=status"`
	// Optional parameter to filter by transaction type
	TransactionType *string `queryParam:"style=form,explode=true,name=transactionType"`
	// ID of the wallet
	WalletID string `pathParam:"style=simple,explode=false,name=walletID"`
}

func (l ListWalletTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListWalletTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListWalletTransactionsRequest) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *ListWalletTransactionsRequest) GetCompletedEndDateTime() *string {
	if o == nil {
		return nil
	}
	return o.CompletedEndDateTime
}

func (o *ListWalletTransactionsRequest) GetCompletedStartDateTime() *string {
	if o == nil {
		return nil
	}
	return o.CompletedStartDateTime
}

func (o *ListWalletTransactionsRequest) GetCount() *int64 {
	if o == nil {
		return nil
	}
	return o.Count
}

func (o *ListWalletTransactionsRequest) GetCreatedEndDateTime() *string {
	if o == nil {
		return nil
	}
	return o.CreatedEndDateTime
}

func (o *ListWalletTransactionsRequest) GetCreatedStartDateTime() *string {
	if o == nil {
		return nil
	}
	return o.CreatedStartDateTime
}

func (o *ListWalletTransactionsRequest) GetSkip() *int64 {
	if o == nil {
		return nil
	}
	return o.Skip
}

func (o *ListWalletTransactionsRequest) GetSourceID() *string {
	if o == nil {
		return nil
	}
	return o.SourceID
}

func (o *ListWalletTransactionsRequest) GetSourceType() *string {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *ListWalletTransactionsRequest) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *ListWalletTransactionsRequest) GetTransactionType() *string {
	if o == nil {
		return nil
	}
	return o.TransactionType
}

func (o *ListWalletTransactionsRequest) GetWalletID() string {
	if o == nil {
		return ""
	}
	return o.WalletID
}

type ListWalletTransactionsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Transactions associated with the wallet
	Classes []shared.WalletTransaction
}

func (o *ListWalletTransactionsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListWalletTransactionsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListWalletTransactionsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListWalletTransactionsResponse) GetClasses() []shared.WalletTransaction {
	if o == nil {
		return nil
	}
	return o.Classes
}
