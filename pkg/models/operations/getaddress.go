// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/moov-go/pkg/models/shared"
	"net/http"
)

type GetAddressRequest struct {
	// Exclude list of states from results. No `include` pararmeters may be used with this parameter.
	ExcludeStates *string `queryParam:"style=form,explode=true,name=excludeStates"`
	// Limits results to a list of given cities.
	IncludeCities *string `queryParam:"style=form,explode=true,name=includeCities"`
	// Limits results to a list of given states.
	IncludeStates *string `queryParam:"style=form,explode=true,name=includeStates"`
	// Limits results to a list of given zipcodes.
	IncludeZipcodes *string `queryParam:"style=form,explode=true,name=includeZipcodes"`
	// Maximum number of results to return.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// Display results with the listed cities at the top.
	PreferCities *string `queryParam:"style=form,explode=true,name=preferCities"`
	// If omitted or set to `city` it uses the sender's IP address to determine location, then automatically adds the city and state to the preferCities value. This parameter takes precedence over other `include` or `exclude` parameters meaning that if it is not set to `none` you may see addresses from areas you do not wish to see.
	PreferGeolocation *string `queryParam:"style=form,explode=true,name=preferGeolocation"`
	// Specifies the percentage of address suggestions that should be preferred and will appear at the top of the results.
	PreferRatio *int64 `queryParam:"style=form,explode=true,name=preferRatio"`
	// Display results with the listed states at the top.
	PreferStates *string `queryParam:"style=form,explode=true,name=preferStates"`
	// Display results with the listed zipcodes at the top.
	PreferZipcodes *string `queryParam:"style=form,explode=true,name=preferZipcodes"`
	// Partial or complete address to search.
	Search string `queryParam:"style=form,explode=true,name=search"`
	// Useful for narrowing results with `addressLine2` suggestions such as `Apt` (denotes an apartment building with multiple residences).
	Selected *string `queryParam:"style=form,explode=true,name=selected"`
	// Include results from alternate data sources. Allowed values are -- `all` (non-postal addresses) or `postal` (postal addresses only).
	Source *string `queryParam:"style=form,explode=true,name=source"`
}

func (o *GetAddressRequest) GetExcludeStates() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeStates
}

func (o *GetAddressRequest) GetIncludeCities() *string {
	if o == nil {
		return nil
	}
	return o.IncludeCities
}

func (o *GetAddressRequest) GetIncludeStates() *string {
	if o == nil {
		return nil
	}
	return o.IncludeStates
}

func (o *GetAddressRequest) GetIncludeZipcodes() *string {
	if o == nil {
		return nil
	}
	return o.IncludeZipcodes
}

func (o *GetAddressRequest) GetMaxResults() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxResults
}

func (o *GetAddressRequest) GetPreferCities() *string {
	if o == nil {
		return nil
	}
	return o.PreferCities
}

func (o *GetAddressRequest) GetPreferGeolocation() *string {
	if o == nil {
		return nil
	}
	return o.PreferGeolocation
}

func (o *GetAddressRequest) GetPreferRatio() *int64 {
	if o == nil {
		return nil
	}
	return o.PreferRatio
}

func (o *GetAddressRequest) GetPreferStates() *string {
	if o == nil {
		return nil
	}
	return o.PreferStates
}

func (o *GetAddressRequest) GetPreferZipcodes() *string {
	if o == nil {
		return nil
	}
	return o.PreferZipcodes
}

func (o *GetAddressRequest) GetSearch() string {
	if o == nil {
		return ""
	}
	return o.Search
}

func (o *GetAddressRequest) GetSelected() *string {
	if o == nil {
		return nil
	}
	return o.Selected
}

func (o *GetAddressRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

type GetAddressResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Address suggestions
	EnrichmentAddresses []shared.EnrichmentAddress
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GetAddressResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetAddressResponse) GetEnrichmentAddresses() []shared.EnrichmentAddress {
	if o == nil {
		return nil
	}
	return o.EnrichmentAddresses
}

func (o *GetAddressResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetAddressResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
