"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from petstore import utils
from petstore.models import errors, operations, shared
from typing import Optional

class ApplePayMerchantDomains:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    def get(self, request: operations.GetApplePayMerchantDomainsRequest) -> operations.GetApplePayMerchantDomainsResponse:
        r"""Get Apple Pay domains
        Get domains registered with Apple Pay.
        <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.read` scope.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetApplePayMerchantDomainsRequest, base_url, '/accounts/{accountID}/apple-pay/domains', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetApplePayMerchantDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplePayMerchantDomains])
                res.apple_pay_merchant_domains = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            pass

        return res

    
    def post(self, request: operations.PostApplePayMerchantDomainsRequest) -> operations.PostApplePayMerchantDomainsResponse:
        r"""Register Apple Pay domains
        Add domains to be registered with Apple Pay.
        <br><br> Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/money-movement/cards/apple-pay/#step-1-register-your-domains) with Apple.
        <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.write` scope.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostApplePayMerchantDomainsRequest, base_url, '/accounts/{accountID}/apple-pay/domains', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "register_apple_pay_merchant_domains", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostApplePayMerchantDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplePayMerchantDomains])
                res.apple_pay_merchant_domains = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        else:
            pass

        return res

    
    def update(self, request: operations.UpdateApplePayMerchantDomainsRequest) -> operations.UpdateApplePayMerchantDomainsResponse:
        r"""Update Apple Pay domains
        Add or remove domains to be registered with Apple Pay.
        <br><br> Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/money-movement/cards/apple-pay/#step-1-register-your-domains) with Apple.
        <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.write` scope.
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.UpdateApplePayMerchantDomainsRequest, base_url, '/accounts/{accountID}/apple-pay/domains', request)
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_apple_pay_merchant_domains", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = '*/*'
        headers['user-agent'] = f'speakeasy-sdk/{self.sdk_configuration.language} {self.sdk_configuration.sdk_version} {self.sdk_configuration.gen_version} {self.sdk_configuration.openapi_doc_version}'
        
        client = self.sdk_configuration.security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateApplePayMerchantDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    