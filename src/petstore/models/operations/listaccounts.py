"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import account as shared_account
from ..shared import accounttype as shared_accounttype
from ..shared import accountverificationstatus as shared_accountverificationstatus
from typing import Optional



@dataclasses.dataclass
class ListAccountsRequest:
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""Optional parameter to limit the number of results in the query"""
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""Filter connected accounts by email address.<br><br>
    Provide the full email address to filter by email.
    """
    foreign_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'foreignID', 'style': 'form', 'explode': True }})
    r"""Serves as an optional alias from a foreign/external system which can be used to reference this resource"""
    include_disconnected: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'includeDisconnected', 'style': 'form', 'explode': True }})
    r"""Filter disconnected accounts.<br><br>
    If true, the response will include disconnected accounts.
    """
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Filter connected accounts by name.<br><br>
    If provided, this query will attempt to find matches against the following Account and Profile fields:
    <ul>
      <li>Account `displayName`</li>
      <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>
      <li>Business Profile `legalBusinessName`</li>
    </ul>
    """
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""The number of items to offset before starting to collect the result set"""
    type: Optional[shared_accounttype.AccountType] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Filter connected accounts by AccountType.<br><br>
    If the `type` parameter is used in combination with `name`, only the corresponding type's name fields will be searched.
    For example, if `type=business` and `name=moov`, the search will attempt to find matches against the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).
    """
    verification_status: Optional[shared_accountverificationstatus.AccountVerificationStatus] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'verification_status', 'style': 'form', 'explode': True }})
    r"""Filter by the `verificationStatus` of accounts."""
    




@dataclasses.dataclass
class ListAccountsResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    accounts: Optional[list[shared_account.Account]] = dataclasses.field(default=None)
    r"""All connected accounts matching the filter parameters"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

