"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import dispute as shared_dispute
from ..shared import disputestatus as shared_disputestatus
from typing import Optional



@dataclasses.dataclass
class ListDisputesRequest:
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""Optional parameter to limit the number of results in the query"""
    respond_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'respondEndDateTime', 'style': 'form', 'explode': True }})
    r"""Optional date-time which exclusively filters all disputes with respond by before this date-time."""
    respond_start_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'respondStartDateTime', 'style': 'form', 'explode': True }})
    r"""Optional date-time which inclusively filters all disputes with respond by after this date-time."""
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""The number of items to offset before starting to collect the result set"""
    status: Optional[shared_disputestatus.DisputeStatus] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Optional dispute status by which to filter the disputes."""
    




@dataclasses.dataclass
class ListDisputesResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    disputes: Optional[list[shared_dispute.Dispute]] = dataclasses.field(default=None)
    r"""List of dispute details"""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    

