"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createrefund as shared_createrefund
from ..shared import getrefund as shared_getrefund
from ..shared import waitfor as shared_waitfor
from typing import Any, Optional



@dataclasses.dataclass
class RefundTransferRequest:
    transfer_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'transferID', 'style': 'simple', 'explode': False }})
    r"""ID of the Transfer"""
    x_idempotency_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-Idempotency-Key', 'style': 'simple', 'explode': False }})
    r"""Prevents duplicate refunds from being created. Note that we only accept UUID v4."""
    create_refund: Optional[shared_createrefund.CreateRefund] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    x_wait_for: Optional[shared_waitfor.WaitFor] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Wait-For', 'style': 'simple', 'explode': False }})
    r"""Optional header that indicates whether to return a synchronous response that includes the full refund and card transaction details or an asynchronous response indicating the refund was created (this is the default response if the header is omitted)."""
    




@dataclasses.dataclass
class RefundTransferResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    get_refund: Optional[shared_getrefund.GetRefund] = dataclasses.field(default=None)
    r"""A refund was successfully created but an error occurred while waiting for a synchronous response."""
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    refund_post_response: Optional[Any] = dataclasses.field(default=None)
    r"""Successfully initiated a card refund"""
    

