"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import wallettransaction as shared_wallettransaction
from typing import Optional



@dataclasses.dataclass
class ListWalletTransactionsRequest:
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountID', 'style': 'simple', 'explode': False }})
    r"""ID of the account"""
    wallet_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'walletID', 'style': 'simple', 'explode': False }})
    r"""ID of the wallet"""
    completed_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'completedEndDateTime', 'style': 'form', 'explode': True }})
    r"""Optional date-time which exclusively filters all transactions completed before this date-time"""
    completed_start_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'completedStartDateTime', 'style': 'form', 'explode': True }})
    r"""Optional date-time which inclusively filters all transactions completed after this date-time"""
    count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'count', 'style': 'form', 'explode': True }})
    r"""Optional parameter to limit the number of results in the query"""
    created_end_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdEndDateTime', 'style': 'form', 'explode': True }})
    r"""Optional date-time which exclusively filters all transactions created before this date-time"""
    created_start_date_time: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdStartDateTime', 'style': 'form', 'explode': True }})
    r"""Optional date-time which inclusively filters all transactions created after this date-time"""
    skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'skip', 'style': 'form', 'explode': True }})
    r"""The number of items to offset before starting to collect the result set"""
    source_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceID', 'style': 'form', 'explode': True }})
    r"""Optional parameter to filter by source ID"""
    source_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sourceType', 'style': 'form', 'explode': True }})
    r"""Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction)"""
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Optional parameter to filter by status (`pending` or `completed`)"""
    transaction_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'transactionType', 'style': 'form', 'explode': True }})
    r"""Optional parameter to filter by transaction type"""
    




@dataclasses.dataclass
class ListWalletTransactionsResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    wallet_transactions: Optional[list[shared_wallettransaction.WalletTransaction]] = dataclasses.field(default=None)
    r"""Transactions associated with the wallet"""
    

