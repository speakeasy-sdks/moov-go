"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import authorizationcontrols as shared_authorizationcontrols
from ..shared import authorizeduser as shared_authorizeduser
from ..shared import cardbrand as shared_cardbrand
from ..shared import cardexpiration as shared_cardexpiration
from ..shared import issuedcardstate as shared_issuedcardstate
from ..shared import issuedcardtype as shared_issuedcardtype
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from petstore import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class FullIssuedCard:
    r"""Issued card with PAN, CVV, and expiration"""
    authorization_controls: Optional[shared_authorizationcontrols.AuthorizationControls] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationControls'), 'exclude': lambda f: f is None }})
    authorized_user: Optional[shared_authorizeduser.AuthorizedUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizedUser'), 'exclude': lambda f: f is None }})
    r"""Fields to identify a human"""
    brand: Optional[shared_cardbrand.CardBrand] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""The card brand"""
    created_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    cvv: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cvv'), 'exclude': lambda f: f is None }})
    expiration: Optional[shared_cardexpiration.CardExpiration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""The expiration date of the linked card or token"""
    funding_wallet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundingWalletID'), 'exclude': lambda f: f is None }})
    issued_card_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuedCardID'), 'exclude': lambda f: f is None }})
    r"""UUID v4"""
    last_four_card_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastFourCardNumber'), 'exclude': lambda f: f is None }})
    memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memo'), 'exclude': lambda f: f is None }})
    r"""Optional descriptive name"""
    pan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pan'), 'exclude': lambda f: f is None }})
    state: Optional[shared_issuedcardstate.IssuedCardState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of a Moov issued card"""
    type: Optional[shared_issuedcardtype.IssuedCardType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of a Moov issued card"""
    

