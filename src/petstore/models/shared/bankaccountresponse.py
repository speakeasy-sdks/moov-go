"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bankaccountstatus as shared_bankaccountstatus
from ..shared import bankaccounttype as shared_bankaccounttype
from ..shared import holdertype as shared_holdertype
from dataclasses_json import Undefined, dataclass_json
from petstore import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class BankAccountResponse:
    r"""Describes a bank account on a Moov account."""
    bank_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccountID'), 'exclude': lambda f: f is None }})
    r"""UUID v4"""
    bank_account_type: Optional[shared_bankaccounttype.BankAccountType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankAccountType'), 'exclude': lambda f: f is None }})
    r"""The bank account type"""
    bank_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bankName'), 'exclude': lambda f: f is None }})
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""Once the bank account is linked, we don't reveal the full bank account number. The fingerprint acts as a way to identify whether two linked bank accounts are the same."""
    holder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holderName'), 'exclude': lambda f: f is None }})
    holder_type: Optional[shared_holdertype.HolderType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holderType'), 'exclude': lambda f: f is None }})
    r"""The type of holder on a funding source"""
    last_four_account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastFourAccountNumber'), 'exclude': lambda f: f is None }})
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    status: Optional[shared_bankaccountstatus.BankAccountStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The bank account status"""
    

