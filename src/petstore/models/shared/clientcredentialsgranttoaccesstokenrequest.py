"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from petstore import utils
from typing import Optional

class ClientCredentialsGrantToAccessTokenRequestGrantType(str, Enum):
    CLIENT_CREDENTIALS = 'client_credentials'
    REFRESH_TOKEN = 'refresh_token'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ClientCredentialsGrantToAccessTokenRequest:
    r"""Allows the use of `Client Credentials Grant` per the RFC 6749 of (OAuth 2.0 Authorization Framework)[https://tools.ietf.org/html/rfc6749#section-4.4]. Following this specification will allow any tooling to be able to use this API to get an `access_token`."""
    grant_type: ClientCredentialsGrantToAccessTokenRequestGrantType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grant_type') }, 'form': { 'field_name': 'grant_type' }})
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'client_id' }})
    r"""If not specified in `Authorization: Basic` it can be specified here"""
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_secret'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'client_secret' }})
    r"""If not specified in `Authorization: Basic` it can be specified here"""
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refresh_token'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'refresh_token' }})
    r"""String passed to the authorization server to gain access to the system"""
    scope: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'scope' }})
    r"""A space-delimited list of [scopes](https://docs.moov.io/guides/developer-tools/api-keys/scopes/) that are allowed"""
    

