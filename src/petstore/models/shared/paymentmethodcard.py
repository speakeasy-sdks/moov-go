"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import cardaccountupdater as shared_cardaccountupdater
from ..shared import cardbrand as shared_cardbrand
from ..shared import cardexpiration as shared_cardexpiration
from ..shared import cardtype as shared_cardtype
from ..shared import cardverifications as shared_cardverifications
from ..shared import paymentmethodtype as shared_paymentmethodtype
from dataclasses_json import Undefined, dataclass_json
from petstore import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class PaymentMethodCardCard:
    r"""Describes a card on a Moov account"""
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingAddress'), 'exclude': lambda f: f is None }})
    bin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bin'), 'exclude': lambda f: f is None }})
    brand: Optional[shared_cardbrand.CardBrand] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand'), 'exclude': lambda f: f is None }})
    r"""The card brand"""
    card_account_updater: Optional[shared_cardaccountupdater.CardAccountUpdater] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardAccountUpdater'), 'exclude': lambda f: f is None }})
    r"""The results of the most recent card update request"""
    card_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardID'), 'exclude': lambda f: f is None }})
    r"""UUID v4"""
    card_on_file: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardOnFile'), 'exclude': lambda f: f is None }})
    r"""Indicates cardholder has authorized card to be stored for future payments"""
    card_type: Optional[shared_cardtype.CardType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardType'), 'exclude': lambda f: f is None }})
    r"""The type of the card"""
    card_verification: Optional[shared_cardverifications.CardVerifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardVerification'), 'exclude': lambda f: f is None }})
    r"""The results of submitting cardholder data to a card network for verification"""
    expiration: Optional[shared_cardexpiration.CardExpiration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiration'), 'exclude': lambda f: f is None }})
    r"""The expiration date of the linked card or token"""
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies a linked payment card or token.
    For Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.
    This field can be used to identify specific payment methods across multiple accounts on your platform.
    """
    holder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holderName'), 'exclude': lambda f: f is None }})
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    issuer_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerCountry'), 'exclude': lambda f: f is None }})
    last_four_card_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastFourCardNumber'), 'exclude': lambda f: f is None }})
    merchant_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccountID'), 'exclude': lambda f: f is None }})
    r"""Moov account ID of the merchant or entity authorized to store the card. Defaults to your platform account ID if cardOnFile is set to true and no other account is provided"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class PaymentMethodCard:
    r"""A method of moving money that is a credit or debit card"""
    card: Optional[PaymentMethodCardCard] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})
    payment_method_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethodID'), 'exclude': lambda f: f is None }})
    r"""UUID v4"""
    payment_method_type: Optional[shared_paymentmethodtype.PaymentMethodType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethodType'), 'exclude': lambda f: f is None }})
    r"""The payment method type that represents a payment rail and directionality"""
    

