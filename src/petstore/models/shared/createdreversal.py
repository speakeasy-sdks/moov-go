"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import amount as shared_amount
from ..shared import createdcancellation as shared_createdcancellation
from ..shared import refundcarddetails as shared_refundcarddetails
from ..shared import refundstatus as shared_refundstatus
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from petstore import utils
from typing import Optional

class CreatedReversalSynchronousRefundResponseFailureCode(str, Enum):
    r"""This field is deprecated and will be removed in December 2023.

    Deprecated: this class will be removed in a future release, please migrate away from it as soon as possible
    """
    CALL_ISSUER = 'call-issuer'
    DO_NOT_HONOR = 'do-not-honor'
    PROCESSING_ERROR = 'processing-error'
    INVALID_TRANSACTION = 'invalid-transaction'
    INVALID_AMOUNT = 'invalid-amount'
    NO_SUCH_ISSUER = 'no-such-issuer'
    REENTER_TRANSACTION = 'reenter-transaction'
    CVV_MISMATCH = 'cvv-mismatch'
    LOST_OR_STOLEN = 'lost-or-stolen'
    INSUFFICIENT_FUNDS = 'insufficient-funds'
    INVALID_CARD_NUMBER = 'invalid-card-number'
    EXPIRED_CARD = 'expired-card'
    INCORRECT_PIN = 'incorrect-pin'
    TRANSACTION_NOT_ALLOWED = 'transaction-not-allowed'
    SUSPECTED_FRAUD = 'suspected-fraud'
    AMOUNT_LIMIT_EXCEEDED = 'amount-limit-exceeded'
    VELOCITY_LIMIT_EXCEEDED = 'velocity-limit-exceeded'
    CARD_NOT_ACTIVATED = 'card-not-activated'
    ISSUER_NOT_AVAILABLE = 'issuer-not-available'
    COULD_NOT_ROUTE = 'could-not-route'
    CARDHOLDER_ACCOUNT_CLOSED = 'cardholder-account-closed'
    UNKNOWN_ISSUE = 'unknown-issue'
    DUPLICATE_TRANSACTION = 'duplicate-transaction'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreatedReversalSynchronousRefundResponse:
    r"""Details of a card refund"""
    amount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""A representation of money containing an integer value and it's currency."""
    card_details: Optional[shared_refundcarddetails.RefundCardDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardDetails'), 'exclude': lambda f: f is None }})
    created_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    failure_code: Optional[CreatedReversalSynchronousRefundResponseFailureCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureCode'), 'exclude': lambda f: f is None }})
    r"""This field is deprecated and will be removed in December 2023.

    Deprecated: this field will be removed in a future release, please migrate away from it as soon as possible
    """
    refund_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refundID'), 'exclude': lambda f: f is None }})
    r"""UUID v4"""
    status: Optional[shared_refundstatus.RefundStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    updated_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreatedReversal:
    r"""Successfully initiated a reversal"""
    cancellation: Optional[shared_createdcancellation.CreatedCancellation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation'), 'exclude': lambda f: f is None }})
    refund: Optional[CreatedReversalSynchronousRefundResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refund'), 'exclude': lambda f: f is None }})
    

