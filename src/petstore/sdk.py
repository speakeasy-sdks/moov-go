"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .account import Account
from .accountcountries import AccountCountries
from .accountissuedcardtransactions import AccountIssuedCardTransactions
from .analyticsaccountscreated import AnalyticsAccountsCreated
from .analyticstransferlargest import AnalyticsTransferLargest
from .analyticstransfersmallest import AnalyticsTransferSmallest
from .analyticstransferstatuses import AnalyticsTransferStatuses
from .analyticstransfersum import AnalyticsTransferSum
from .applepaymerchantdomains import ApplePayMerchantDomains
from .applepaysession import ApplePaySession
from .avatar import Avatar
from .bankaccount import BankAccount
from .bankid import BankID
from .capability import Capability
from .card import Card
from .completemicrodeposits import CompleteMicroDeposits
from .dispute import Dispute
from .disputes import Disputes
from .enrichmentaddress import EnrichmentAddress
from .enrichmentprofile import EnrichmentProfile
from .file import File
from .filedetails import FileDetails
from .files import Files
from .fullissuedcard import FullIssuedCard
from .industries import Industries
from .initiatemicrodeposits import InitiateMicroDeposits
from .institutions import Institutions
from .issuedcard import IssuedCard
from .linkapplepaytoken import LinkApplePayToken
from .linkcard import LinkCard
from .listaccounts import ListAccounts
from .listbankaccounts import ListBankAccounts
from .listcapability import ListCapability
from .listcards import ListCards
from .listissuedcards import ListIssuedCards
from .networkids import NetworkIDs
from .oauth2token import OAuth2Token
from .paymentmethod import PaymentMethod
from .paymentmethods import PaymentMethods
from .refund import Refund
from .representative import Representative
from .representatives import Representatives
from .requestcard import RequestCard
from .sdkconfiguration import SDKConfiguration
from .termsofservicetoken import TermsOfServiceToken
from .transfer import Transfer
from .transferoptions import TransferOptions
from .transfers import Transfers
from .underwriting import Underwriting
from .walletsforaccount import WalletsForAccount
from .wallettransaction import WalletTransaction
from .wallettransactions import WalletTransactions
from petstore import utils
from petstore.models import shared

class Petstore:
    r"""Moov API: Moov is a platform that enables developers to integrate all aspects of money movement with ease and speed. The Moov API makes it simple for platforms to send, receive, and store money. Our API is based upon REST principles, returns JSON responses, and uses standard HTTP response codes. To learn more about how Moov works at a high level, read our [concepts](https://docs.moov.io/guides/concepts/) guide."""
    account: Account
    account_countries: AccountCountries
    account_issued_card_transactions: AccountIssuedCardTransactions
    analytics_accounts_created: AnalyticsAccountsCreated
    analytics_transfer_largest: AnalyticsTransferLargest
    analytics_transfer_smallest: AnalyticsTransferSmallest
    analytics_transfer_statuses: AnalyticsTransferStatuses
    analytics_transfer_sum: AnalyticsTransferSum
    apple_pay_merchant_domains: ApplePayMerchantDomains
    apple_pay_session: ApplePaySession
    avatar: Avatar
    bank_account: BankAccount
    bank_id: BankID
    capability: Capability
    card: Card
    complete_micro_deposits: CompleteMicroDeposits
    dispute: Dispute
    disputes: Disputes
    r"""A [dispute](https://docs.moov.io/guides/money-movement/cards/disputes/) is a situation where a cardholder formally questions a transaction on their account with their card issuer. This could be for a number of reasons ranging from billing errors to fraudulent activity or dissatisfactory goods/services. If the dispute is recognized as legitimate, the issuer will reverse the payment (otherwise known as a chargeback)."""
    enrichment_address: EnrichmentAddress
    enrichment_profile: EnrichmentProfile
    file: File
    file_details: FileDetails
    files: Files
    r"""Files can be used for a multitude of different use cases including but not limited to, individual identity verification and business underwriting. You may need to provide documentation to enable capabilities or to keep capabilities enabled for an account. The maximum file size is 10MB. Each account is allowed a maximum of 10 files. Acceptable file types include csv, jpg, pdf, and png. To learn about uploading files in the Moov Dashboard, read our [file upload guide](https://docs.moov.io/guides/dashboard/accounts/#file-upload)."""
    full_issued_card: FullIssuedCard
    industries: Industries
    r"""Information about industries and their merchant codes."""
    initiate_micro_deposits: InitiateMicroDeposits
    institutions: Institutions
    r"""Lookup ACH and wire participating financial institutions. We recommend using this endpoint when an end-user enters a routing number to confirm their bank or credit union."""
    issued_card: IssuedCard
    link_apple_pay_token: LinkApplePayToken
    link_card: LinkCard
    list_accounts: ListAccounts
    list_bank_accounts: ListBankAccounts
    list_capability: ListCapability
    list_cards: ListCards
    list_issued_cards: ListIssuedCards
    network_i_ds: NetworkIDs
    o_auth2_token: OAuth2Token
    payment_method: PaymentMethod
    payment_methods: PaymentMethods
    refund: Refund
    representative: Representative
    representatives: Representatives
    r"""We think of a representative as an individual who can take major actions on behalf of a business. A representative can be the business owner, or anyone who owns 25% or more of the business. Some examples of representatives are the CEO, CFO, COO, or president. We require all business accounts to have valid information for at least one representative. Moov accounts must have verified business representatives before a business account can send funds, collect money from other accounts, or store funds in a wallet. To learn more, read our guide on [business representatives](https://docs.moov.io/guides/accounts/business-representatives/)."""
    request_card: RequestCard
    terms_of_service_token: TermsOfServiceToken
    transfer: Transfer
    transfer_options: TransferOptions
    transfers: Transfers
    r"""A [transfer](https://docs.moov.io/guides/money-movement/) is the movement of money between Moov accounts, from source to destination. Provided you have linked a bank account which has been verified, you can initiate a transfer to another Moov account. All you need to do is note a [paymentMethod](#tag/Payment-methods), the $ amount of the transfer, and a brief description. With Moov, you can also implement transfer groups, allowing you to associate multiple transfers together and run them sequentially. To learn more, read our guide on [transfer groups](https://docs.moov.io/guides/money-movement/transfer-groups/#transfer-statuses)."""
    underwriting: Underwriting
    r"""[Underwriting](https://docs.moov.io/guides/accounts/underwriting) is a tool Moov uses to understand a business’s profile before allowing them to collect funds on our platform. This profile includes information like a description of the company or the merchant’s business model, the industry they operate in, and transaction volume. Through underwriting, we can understand and prevent unnecessary financial risk for Moov and those transacting on our platform. Note that underwriting can be instant, but in some cases make take around 2 business days before approval."""
    wallet_transaction: WalletTransaction
    wallet_transactions: WalletTransactions
    wallets_for_account: WalletsForAccount

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 security: shared.Security = None,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = utils.configure_security_client(client, security)
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.account = Account(self.sdk_configuration)
        self.account_countries = AccountCountries(self.sdk_configuration)
        self.account_issued_card_transactions = AccountIssuedCardTransactions(self.sdk_configuration)
        self.analytics_accounts_created = AnalyticsAccountsCreated(self.sdk_configuration)
        self.analytics_transfer_largest = AnalyticsTransferLargest(self.sdk_configuration)
        self.analytics_transfer_smallest = AnalyticsTransferSmallest(self.sdk_configuration)
        self.analytics_transfer_statuses = AnalyticsTransferStatuses(self.sdk_configuration)
        self.analytics_transfer_sum = AnalyticsTransferSum(self.sdk_configuration)
        self.apple_pay_merchant_domains = ApplePayMerchantDomains(self.sdk_configuration)
        self.apple_pay_session = ApplePaySession(self.sdk_configuration)
        self.avatar = Avatar(self.sdk_configuration)
        self.bank_account = BankAccount(self.sdk_configuration)
        self.bank_id = BankID(self.sdk_configuration)
        self.capability = Capability(self.sdk_configuration)
        self.card = Card(self.sdk_configuration)
        self.complete_micro_deposits = CompleteMicroDeposits(self.sdk_configuration)
        self.dispute = Dispute(self.sdk_configuration)
        self.disputes = Disputes(self.sdk_configuration)
        self.enrichment_address = EnrichmentAddress(self.sdk_configuration)
        self.enrichment_profile = EnrichmentProfile(self.sdk_configuration)
        self.file = File(self.sdk_configuration)
        self.file_details = FileDetails(self.sdk_configuration)
        self.files = Files(self.sdk_configuration)
        self.full_issued_card = FullIssuedCard(self.sdk_configuration)
        self.industries = Industries(self.sdk_configuration)
        self.initiate_micro_deposits = InitiateMicroDeposits(self.sdk_configuration)
        self.institutions = Institutions(self.sdk_configuration)
        self.issued_card = IssuedCard(self.sdk_configuration)
        self.link_apple_pay_token = LinkApplePayToken(self.sdk_configuration)
        self.link_card = LinkCard(self.sdk_configuration)
        self.list_accounts = ListAccounts(self.sdk_configuration)
        self.list_bank_accounts = ListBankAccounts(self.sdk_configuration)
        self.list_capability = ListCapability(self.sdk_configuration)
        self.list_cards = ListCards(self.sdk_configuration)
        self.list_issued_cards = ListIssuedCards(self.sdk_configuration)
        self.network_i_ds = NetworkIDs(self.sdk_configuration)
        self.o_auth2_token = OAuth2Token(self.sdk_configuration)
        self.payment_method = PaymentMethod(self.sdk_configuration)
        self.payment_methods = PaymentMethods(self.sdk_configuration)
        self.refund = Refund(self.sdk_configuration)
        self.representative = Representative(self.sdk_configuration)
        self.representatives = Representatives(self.sdk_configuration)
        self.request_card = RequestCard(self.sdk_configuration)
        self.terms_of_service_token = TermsOfServiceToken(self.sdk_configuration)
        self.transfer = Transfer(self.sdk_configuration)
        self.transfer_options = TransferOptions(self.sdk_configuration)
        self.transfers = Transfers(self.sdk_configuration)
        self.underwriting = Underwriting(self.sdk_configuration)
        self.wallet_transaction = WalletTransaction(self.sdk_configuration)
        self.wallet_transactions = WalletTransactions(self.sdk_configuration)
        self.wallets_for_account = WalletsForAccount(self.sdk_configuration)
    